{
  "TypeScript Emitter Property": {
    "scope": "typescript,typescriptreact",
    "prefix": "ts-prop",
    "description": "TypeScript emitter property",
    "body": [
      "private _${1:name}:${2:type}=${3:defaultValue};",
      "public get ${1:name}(){return this._${1:name}}",
      "public set ${1:name}(value:${2:type}){",
      "    if(this._${1:name}===value){return}",
      "    this._${1:name}=value;",
      "    this.emit('${1:name}');",
      "}"
    ]
  },


  "TS Named Event": {
    "scope": "typescript,typescriptreact",
    "prefix": "ts-event",
    "description": "TypeScript named event",
    "body": [
      "private readonly _on${1:name}=createEvent();",
      "public get on${1:name}(){return this._on${1:name}.evt}"
    ]
  },


  "TS Named Value Event": {
    "scope": "typescript,typescriptreact",
    "prefix": "ts-value-event",
    "description": "TypeScript named value event",
    "body": [
      "private readonly _on${1:name}=createValueEvent<${2:valueType}>();",
      "public get on${1:name}(){return this._on${1:name}.evt}"
    ]
  },


  "TS Named Value prop": {
    "scope": "typescript,typescriptreact",
    "prefix": "ts-value-prop",
    "description": "TypeScript named value event",
    "body": [
      "private readonly _${1:name}=createValueBackedEvent<${2:valueType}>(${3:initValue});",
      "public get ${1:name}(){return this._${1:name}.evt}"
    ]
  },


  "TS Public Named Value prop": {
    "scope": "typescript,typescriptreact",
    "prefix": "ts-public-value-prop",
    "description": "TypeScript public named value event",
    "body": [
      "public readonly ${1:name}=createValueBackedEvent<${2:valueType}>(${3:initValue});"
    ]
  },


  "TS Named Custom Event": {
    "scope": "typescript,typescriptreact",
    "prefix": "ts-custom-event",
    "description": "TypeScript named custom event",
    "body": [
      "private readonly _on${1:name}=createEventT<(${2:listenerArgs})=>void>();",
      "public get on${1:name}(){return this._on${1:name}.evt}"
    ]
  },


  "TS Named Custom Event 2": {
    "scope": "typescript,typescriptreact",
    "prefix": "ts-custom-event-2",
    "description": "TypeScript named custom event",
    "body": [
      "private readonly _on${1:name}=createEventT<(${2:listenerArgs})=>void>();",
      "public get on${1:name}(){return this._on${1:name}.evt}"
    ]
  }
  
}